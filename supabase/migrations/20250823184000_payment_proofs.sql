do $$
begin
  if not exists (select 1 from pg_type where typname='payment_status') then
    create type payment_status as enum ('pending','approved','flagged');
  end if;
end $$;

create table if not exists public.payment_proofs (
  id bigint generated by default as identity primary key,
  user_id uuid not null references auth.users(id) on delete cascade,
  file_path text not null unique, -- e.g. "<uid>/2025-08-23-1234.jpg"
  status payment_status not null default 'pending',
  reviewed_by uuid references auth.users(id),
  reviewed_at timestamptz,
  created_at timestamptz not null default now()
);

alter table public.payment_proofs enable row level security;

-- read: owner or admin
drop policy if exists "proofs_owner_or_admin_read" on public.payment_proofs;
create policy "proofs_owner_or_admin_read" on public.payment_proofs
for select using (
  user_id = auth.uid() or exists (select 1 from public.profiles p where p.id=auth.uid() and p.is_admin)
);

-- insert: owner only (status always pending)
drop policy if exists "proofs_owner_insert" on public.payment_proofs;
create policy "proofs_owner_insert" on public.payment_proofs
for insert with check ( user_id = auth.uid() );

-- updates: only admin (change status/reviewer)
drop policy if exists "proofs_admin_update" on public.payment_proofs;
create policy "proofs_admin_update" on public.payment_proofs
for update using (
  exists (select 1 from public.profiles p where p.id=auth.uid() and p.is_admin)
);

-- optional: block deletes except admin
drop policy if exists "proofs_admin_delete" on public.payment_proofs;
create policy "proofs_admin_delete" on public.payment_proofs
for delete using (
  exists (select 1 from public.profiles p where p.id=auth.uid() and p.is_admin)
);

-- admin RPC for status change (so clients don't need service role)
create or replace function public.admin_set_payment_status(proof_id bigint, new_status payment_status)
returns void
language plpgsql
security definer
set search_path = public
as $$
begin
  if not exists (select 1 from public.profiles p where p.id=auth.uid() and p.is_admin) then
    raise exception 'not admin';
  end if;
  update public.payment_proofs
    set status = new_status,
        reviewed_by = auth.uid(),
        reviewed_at = now()
  where id = proof_id;
end $$;

comment on function public.admin_set_payment_status is 'Admin-only: set payment proof status';

-- helper view for admin
create or replace view public.admin_payment_pending as
select pp.*, au.email as user_email
from public.payment_proofs pp
left join public.profiles au on au.id = pp.user_id
where pp.status = 'pending';
