name: Go Live (FTPS deploy + install + seed + revalidate)

on:
  workflow_dispatch:
    inputs:
      slug:
        description: Event slug
        type: string
        required: true
        default: launch-party
      title:
        description: Event title
        type: string
        required: true
        default: Launch Party
      venue:
        description: Event venue
        type: string
        required: true
        default: Makati
      start_time:
        description: "Event start time (YYYY-MM-DD HH:MM:SS)"
        type: string
        required: true
        default: "2025-09-10 19:00:00"

jobs:
  go-live:
    runs-on: ubuntu-latest
    env:
      BASE: https://api.quickgig.ph
      APP_ORIGIN: https://app.quickgig.ph
      FTP_SERVER: ${{ secrets.FTP_SERVER || secrets.HOSTINGER_FTP_HOST }}
      FTP_PORT: ${{ secrets.FTP_PORT }}
      FTP_USERNAME: ${{ secrets.FTP_USERNAME }}
      FTP_PASSWORD: ${{ secrets.FTP_PASSWORD }}
      HOSTINGER_SERVER_DIR: ${{ secrets.HOSTINGER_SERVER_DIR }}
      ADMIN_TOKEN: ${{ secrets.ADMIN_TOKEN }}
      REVALIDATE_TOKEN: ${{ secrets.REVALIDATE_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install tools
        run: |
          set -euo pipefail
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends lftp jq ca-certificates

      - name: Deploy backend via FTPS
        env:
          FTP_SERVER: ${{ secrets.FTP_SERVER }}
          FTP_PORT:   ${{ secrets.FTP_PORT }}
          FTP_USER:   ${{ secrets.FTP_USERNAME }}
          FTP_PASS:   ${{ secrets.FTP_PASSWORD }}
          REMOTE_DIR: ${{ secrets.HOSTINGER_SERVER_DIR }}
        run: |
          set -euo pipefail

          echo "::group::Sanity checks"
          : "${FTP_SERVER:?FTP_SERVER missing}"
          : "${FTP_PORT:?FTP_PORT missing}"
          : "${FTP_USER:?FTP_USERNAME missing}"
          : "${FTP_PASS:?FTP_PASSWORD missing}"
          : "${REMOTE_DIR:?HOSTINGER_SERVER_DIR missing}"
          echo "FTP_SERVER=$FTP_SERVER"
          echo "FTP_PORT=$FTP_PORT"
          echo "REMOTE_DIR=$REMOTE_DIR"
          lftp --version
          echo "::endgroup::"

          echo "::group::Resolve backend directory"
          # Pick the backend folder from repo (supports multiple layouts)
          if [ -d api.quickgig.ph ]; then
            BACKEND_DIR="api.quickgig.ph"
          elif [ -d backend ]; then
            BACKEND_DIR="backend"
          elif [ -d api ]; then
            BACKEND_DIR="api"
          else
            echo "Unable to locate backend directory (tried api.quickgig.ph, backend, api)" >&2
            exit 1
          fi
          echo "Using BACKEND_DIR=$BACKEND_DIR"
          echo "::endgroup::"

          echo "::group::Probe FTPS connectivity"
          # Use explicit TLS (ftps://). Disable cert verification for shared hosts; control/data are protected.
          lftp -d -e "
            set net:max-retries 1;
            set net:timeout 15;
            set ftp:ssl-force true;
            set ftp:ssl-protect-data true;
            set ftp:passive-mode true;
            set ssl:verify-certificate no;
            open -u ${FTP_USER},${FTP_PASS} -p ${FTP_PORT} ftps://${FTP_SERVER};
            pwd; ls -la ${REMOTE_DIR};
            bye
          " || { echo 'FTPS probe failed'; exit 1; }
          echo "::endgroup::"

          echo "::group::Mirror backend to remote"
          # Mirror (reverse upload) with delete to keep remote in sync
          lftp -e "
            set net:max-retries 2;
            set net:timeout 30;
            set ftp:ssl-force true;
            set ftp:ssl-protect-data true;
            set ftp:passive-mode true;
            set ssl:verify-certificate no;
            open -u ${FTP_USER},${FTP_PASS} -p ${FTP_PORT} ftps://${FTP_SERVER};
            mirror -R --delete --verbose ${BACKEND_DIR} ${REMOTE_DIR};
            bye
          " || { echo 'FTPS mirror failed'; exit 1; }
          echo "::endgroup::"

      - name: Verify backend
        run: |
          set -euo pipefail
          BASE="https://api.quickgig.ph"
          curl -fsS "$BASE/status" | jq .
          curl -fsS "$BASE/tools/install.php?token=RUN_ONCE" | tee /tmp/install.json | jq .

      - name: Seed sample event
        run: |
          set -euo pipefail
          BASE="https://api.quickgig.ph"
          PAYLOAD=$(jq -nc --arg s "${{ inputs.slug }}" --arg t "${{ inputs.title }}" --arg v "${{ inputs.venue }}" --arg st "${{ inputs.start_time }}" '
            {
              slug:$s, title:$t, venue:$v, start_time:$st, status:"published",
              tickets:[
                {name:"GA",  price_cents:50000,  quantity_total:100},
                {name:"VIP", price_cents:112000, quantity_total:20}
              ]
            }')
          curl -fsS -X POST "$BASE/admin/events/create.php" \
            -H "Content-Type: application/json" \
            -H "X-Admin-Token: $ADMIN_TOKEN" \
            --data "$PAYLOAD" | tee /tmp/seed.json | jq .
          curl -fsS "$BASE/events/index.php" | jq '.[0] // .'

      - name: Revalidate frontend cache
        env:
          REVALIDATE_TOKEN: ${{ secrets.REVALIDATE_TOKEN }}
        run: |
          set -euo pipefail
          curl -fsS "https://app.quickgig.ph/api/revalidate?tag=events&secret=${REVALIDATE_TOKEN}" | jq .

