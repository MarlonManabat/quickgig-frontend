name: Full E2E

on:
  workflow_dispatch: {}
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

concurrency:
  group: full-e2e-${{ github.ref }}
  cancel-in-progress: true

jobs:
  e2e:
    runs-on: ubuntu-latest
    timeout-minutes: 35
    env:
      # Safe defaults so CI never regresses if secrets are missing
      NEXT_PUBLIC_APP_ORIGIN: ${{ secrets.NEXT_PUBLIC_APP_ORIGIN || 'https://app.quickgig.ph' }}
      APP_ORIGIN:             ${{ secrets.APP_ORIGIN || 'https://app.quickgig.ph' }}
      NEXT_PUBLIC_SUPABASE_URL:      ${{ secrets.NEXT_PUBLIC_SUPABASE_URL || '' }}
      NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY || '' }}
      NODE_ENV: production
      PORT: 3000
      BASE_URL: http://localhost:3000
      NEXT_TELEMETRY_DISABLED: 1

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      # Detect package manager and set commands
      - name: Detect package manager
        id: pm
        shell: bash
        run: |
          if [ -f pnpm-lock.yaml ]; then
            echo "name=pnpm" >> $GITHUB_OUTPUT
            echo "install=pnpm install --frozen-lockfile" >> $GITHUB_OUTPUT
            echo "build=pnpm build" >> $GITHUB_OUTPUT
            echo "start=pnpm start" >> $GITHUB_OUTPUT
            echo "exec=pnpm exec" >> $GITHUB_OUTPUT
          elif [ -f yarn.lock ]; then
            echo "name=yarn" >> $GITHUB_OUTPUT
            echo "install=yarn --frozen-lockfile" >> $GITHUB_OUTPUT
            echo "build=yarn build" >> $GITHUB_OUTPUT
            echo "start=yarn start" >> $GITHUB_OUTPUT
            echo "exec=yarn" >> $GITHUB_OUTPUT
          else
            if [ -f package-lock.json ]; then
              echo "name=npm" >> $GITHUB_OUTPUT
              echo "install=npm ci" >> $GITHUB_OUTPUT
            else
              echo "name=npm" >> $GITHUB_OUTPUT
              echo "install=npm install" >> $GITHUB_OUTPUT
            fi
            echo "build=npm run build" >> $GITHUB_OUTPUT
            echo "start=npm run start" >> $GITHUB_OUTPUT
            echo "exec=npx" >> $GITHUB_OUTPUT
          fi
          echo "Using PM: ${{ steps.pm.outputs.name }}"

      # PM-specific setup & caches
      - name: Setup pnpm
        if: ${{ steps.pm.outputs.name == 'pnpm' }}
        uses: pnpm/action-setup@v4
        with:
          version: 9
          run_install: false

      - name: Determine pnpm store path
        if: ${{ steps.pm.outputs.name == 'pnpm' }}
        id: pnpm-store
        run: echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Cache pnpm store
        if: ${{ steps.pm.outputs.name == 'pnpm' }}
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-store.outputs.STORE_PATH }}
          key: pnpm-store-${{ runner.os }}-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            pnpm-store-${{ runner.os }}-

      - name: Enable Corepack (yarn)
        if: ${{ steps.pm.outputs.name == 'yarn' }}
        run: corepack enable

      - name: Cache Yarn
        if: ${{ steps.pm.outputs.name == 'yarn' }}
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/yarn
            **/.yarn/cache
          key: yarn-cache-${{ runner.os }}-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            yarn-cache-${{ runner.os }}-

      - name: Cache npm
        if: ${{ steps.pm.outputs.name == 'npm' }}
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: npm-cache-${{ runner.os }}-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            npm-cache-${{ runner.os }}-

      # Install with the proper PM and flags
      - name: Install deps
        run: ${{ steps.pm.outputs.install }}

      # Install Playwright browsers + OS deps
      - name: Install Playwright browsers
        run: ${{ steps.pm.outputs.exec }} playwright install --with-deps

      # Build the app
      - name: Build
        run: ${{ steps.pm.outputs.build }}

      # Start server & prove it's healthy before testing
      - name: Start app (background)
        run: |
          ${{ steps.pm.outputs.start }} &> .next-app.log &
          # health checks (avoid 404s from not-yet-started server)
          ${{ steps.pm.outputs.exec }} wait-on --timeout 120000 http://localhost:3000
          curl -fsS http://localhost:3000/ | head -n 50 || (echo "Root health check failed" && exit 1)

      # Echo envs for debugging regex-based tests
      - name: Echo origins
        run: |
          echo "APP_ORIGIN=${APP_ORIGIN}"
          echo "NEXT_PUBLIC_APP_ORIGIN=${NEXT_PUBLIC_APP_ORIGIN}"
          echo "BASE_URL=${BASE_URL}"

      # Run tests
      - name: Run Full E2E
        run: ${{ steps.pm.outputs.exec }} playwright test

      # Always upload artifacts for debugging
      - name: Upload Playwright report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-report
          if-no-files-found: warn
          retention-days: 7

      - name: Upload Next server log
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: next-server-log
          path: .next-app.log
          if-no-files-found: ignore
          retention-days: 7

