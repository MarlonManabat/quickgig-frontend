name: Release Check (PR smoke)

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]

concurrency:
  group: pr-${{ github.event.pull_request.number }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    env:
      DISABLE_STRIPE: '1'
      NEXT_TELEMETRY_DISABLED: 1
      NEXT_PUBLIC_SUPABASE_URL: ${{ vars.NEXT_PUBLIC_SUPABASE_URL || 'https://example.supabase.co' }}
      NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ vars.NEXT_PUBLIC_SUPABASE_ANON_KEY || 'test-anon-key' }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: package-lock.json
      - run: npm ci
      - name: Install Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest
      - name: Show Supabase CLI version
        run: supabase --version
      - name: Build DB_URL from secrets
        env:
          SUPABASE_PROJECT_REF: ${{ secrets.SUPABASE_PROJECT_REF }}
          SUPABASE_DB_PASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}
        run: |
          set -eu
          if [ -z "${SUPABASE_PROJECT_REF:-}" ] || [ -z "${SUPABASE_DB_PASSWORD:-}" ]; then
            echo "::error::Missing SUPABASE_PROJECT_REF or SUPABASE_DB_PASSWORD secrets"
            exit 1
          fi
          echo "DB_URL=postgresql://postgres:${SUPABASE_DB_PASSWORD}@db.${SUPABASE_PROJECT_REF}.supabase.co:5432/postgres" >> $GITHUB_ENV

      - name: Skip if no migrations
        id: migcheck
        run: |
          if [ ! -d supabase/migrations ] || [ -z "$(ls -A supabase/migrations || true)" ]; then
            echo "empty=true" >> $GITHUB_OUTPUT
          else
            echo "empty=false" >> $GITHUB_OUTPUT
          fi
      - name: Validate migrations (PR)
        if: ${{ github.event_name == 'pull_request' && steps.migcheck.outputs.empty == 'false' }}
        env:
          DB_URL: ${{ env.DB_URL }}
        run: |
          set -eu
          supabase db push --db-url "$DB_URL" --dry-run --include-all
      - name: Apply migrations (main)
        if: ${{ github.ref == 'refs/heads/main' && github.event_name != 'pull_request' && steps.migcheck.outputs.empty == 'false' }}
        env:
          DB_URL: ${{ env.DB_URL }}
        run: |
          set -eu
          supabase db push --db-url "$DB_URL" --non-interactive --include-all
      - run: npm run build
      - name: Upload build artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            .next/**/*.html
            **/playwright-report/**

  e2e_smoke:
    needs: build
    runs-on: ubuntu-latest
    timeout-minutes: 25
    env:
      DISABLE_STRIPE: '1'
      NEXT_TELEMETRY_DISABLED: 1
      NEXT_PUBLIC_SUPABASE_URL: ${{ vars.NEXT_PUBLIC_SUPABASE_URL || 'https://example.supabase.co' }}
      NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ vars.NEXT_PUBLIC_SUPABASE_ANON_KEY || 'test-anon-key' }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: package-lock.json
      - run: npm ci
      - run: npm run build
      - run: npx playwright install --with-deps
      - run: npm run test:smoke
      - name: Upload Playwright report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report-smoke
          path: |
            playwright-report/**
            test-results/**
          if-no-files-found: ignore
