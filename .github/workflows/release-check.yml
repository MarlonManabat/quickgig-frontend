name: Release Check

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]
  workflow_dispatch:

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write
  pull-requests: write
  issues: write
  deployments: read

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install deps (robust)
        run: npm ci --no-audit --no-fund

      - name: Install Playwright (with system deps)
        run: npx playwright install --with-deps

      # Get Vercel preview URL (wait/retry, fall back to GitHub API)
      - name: Get Vercel preview URL
        run: node scripts/get-vercel-preview-url.mjs
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}

      - name: Echo preview
        run: |
          if [ -n "${BASE_URL}" ]; then
            echo "BASE_URL=${BASE_URL}"
            echo "url.txt:"
            cat url.txt
          else
            echo "No preview URL resolved. Skipping preview-dependent steps."
          fi

      - name: Seed locations (best-effort)
        if: env.BASE_URL != ''
        run: |
          curl -fsS "$BASE_URL/api/test/seed?only=locations" || true

      # Seed preview (best-effort)
      - name: Seed test data (Preview)
        if: env.BASE_URL != ''
        run: node scripts/seed-preview.mjs
        env:
          BASE_URL: ${{ env.BASE_URL }}
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
          SEED_ADMIN_EMAIL: ${{ secrets.SEED_ADMIN_EMAIL }}

      # Release tests
      - name: Run release tests
        if: env.BASE_URL != ''
        run: npm run test:release
        env:
          BASE_URL: ${{ env.BASE_URL }}
          WORKER_EMAIL: ${{ secrets.WORKER_EMAIL }}
          WORKER_PASSWORD: ${{ secrets.WORKER_PASSWORD }}
          EMPLOYER_EMAIL: ${{ secrets.EMPLOYER_EMAIL }}
          EMPLOYER_PASSWORD: ${{ secrets.EMPLOYER_PASSWORD }}
          ADMIN_EMAIL: ${{ secrets.ADMIN_EMAIL }}
          ADMIN_PASSWORD: ${{ secrets.ADMIN_PASSWORD }}

      # Always upload artifacts
      - name: Upload test artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: |
            test-results/**
            playwright-report/**
            button-audit/**
          if-no-files-found: ignore

      - name: Autofix suggestions
        continue-on-error: true
        run: npm run autofix:ci

      - name: Upload autofix patch
        uses: actions/upload-artifact@v4
        with:
          name: autofix.patch
          path: autofix.patch

      - name: Comment autofix patch (non-blocking)
        continue-on-error: true
        uses: actions/github-script@v7
        with:
          script: |
            const {owner, repo} = context.repo;
            const pr = context.payload.pull_request?.number;
            if (!pr) { core.setOutput('skipped', 'no-pr'); return; }
            const url = `${context.serverUrl}/${owner}/${repo}/actions/runs/${context.runId}/artifacts`;
            await github.rest.issues.createComment({
              owner, repo, issue_number: pr,
              body: [
                `Auto-fix patch available.`,
                ``,
                `Download: ${url}`,
                ``,
                `Apply:`,
                '```bash',
                'git apply autofix.patch',
                '```'
              ].join('\n')
            });
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
