name: Final QA

on:
  pull_request:
  workflow_dispatch:
    inputs:
      pr:
        description: PR number
        required: false
      attempt:
        description: Heal attempt
        required: false
      max_heal_rounds:
        description: Max heal rounds override
        required: false

permissions:
  actions: write
  contents: read

jobs:
  qa:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    env:
      NODE_ENV: test
      ATTEMPT: ${{ inputs.attempt || 1 }}
      MAX_HEAL_ROUNDS: ${{ inputs.max_heal_rounds || 2 }}
      PR_NUMBER: ${{ github.event.pull_request.number || inputs.pr }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Install
        run: npm ci

      - name: Install Playwright (with deps)
        run: npx playwright install --with-deps

      - name: Resolve Vercel Preview URL
        id: preview
        run: |
          if [ -n "${PREVIEW_URL}" ]; then
            echo "url=${PREVIEW_URL}" >> "$GITHUB_OUTPUT"
          elif [ -n "${VERCEL_PREVIEW_URL}" ]; then
            echo "url=${VERCEL_PREVIEW_URL}" >> "$GITHUB_OUTPUT"
          else
            echo "url=" >> "$GITHUB_OUTPUT"
          fi

      - name: Export BASE_URL
        run: echo "BASE_URL=${{ steps.preview.outputs.url }}" >> $GITHUB_ENV

      - name: Seed test data
        run: |
          node - <<'NODE'
          (async () => {
            const res = await fetch(process.env.BASE_URL + '/api/test/seed', { method: 'POST' });
            if (!res.ok) {
              console.error('Seed failed', res.status);
              process.exit(1);
            }
          })();
          NODE

      - name: Run smoke tests
        run: npx playwright test --project=smoke
        continue-on-error: true

      - name: Move smoke report
        if: always()
        run: mv playwright-report playwright-report-smoke || true

      - name: Run QA tests
        id: qa
        run: npx playwright test --project=qa --retries=2 --timeout=60000
        continue-on-error: true

      - name: Move QA report
        if: always()
        run: mv playwright-report playwright-report-qa || true

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: qa-artifacts
          path: |
            playwright-report-smoke/**
            playwright-report-qa/**
            test-results/**
            tests/qa/coverage.json
          if-no-files-found: ignore
          retention-days: 7

      - name: Trigger self-heal
        if: failure()
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          FAILED_JOB_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          jq -n \
            --arg previewUrl "${{ env.BASE_URL }}" \
            --arg failedJobUrl "$FAILED_JOB_URL" \
            --arg artifactsUrl "$FAILED_JOB_URL#artifacts" \
            --arg branch "${{ github.head_ref || github.ref_name }}" \
            --arg prNumber "${{ env.PR_NUMBER }}" \
            '{previewUrl:$previewUrl,failedJobUrl:$failedJobUrl,artifactsUrl:$artifactsUrl,branch:$branch,prNumber:$prNumber, reason:"final-qa failed"}' > payload.json
          if command -v gh >/dev/null 2>&1; then
            gh workflow run codex-self-heal.yml -f payload=@payload.json
          else
            echo "gh not found"
          fi

      - name: Self-heal loop controller
        if: failure()
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          max=${MAX_HEAL_ROUNDS:-2}
          attempt=${ATTEMPT:-1}
          pr=${PR_NUMBER}
          if [ "$attempt" -ge "$max" ]; then
            echo "Self-heal rounds exhausted ($attempt/$max)"
            exit 1
          fi
          head=$(gh pr view "$pr" --json commits --jq '.commits[-1].oid')
          echo "Waiting for Codex commit on PR #$pr (head $head)"
          for i in $(seq 1 30); do
            sleep 10
            latest=$(gh pr view "$pr" --json commits --jq '.commits[-1].oid')
            author=$(gh pr view "$pr" --json commits --jq '.commits[-1].commit.author.name')
            if [ "$latest" != "$head" ] && [ "$author" = "ChatGPT Codex Connector" ]; then
              branch=$(gh pr view "$pr" --json headRefName --jq .headRefName)
              echo "Detected new Codex commit $latest, re-running QA (attempt $((attempt+1)))"
              gh workflow run final-qa.yml --ref "$branch" -f pr=$pr -f attempt=$((attempt+1))
              exit 0
            fi
          done
          echo "No new Codex commit found."
          exit 1
