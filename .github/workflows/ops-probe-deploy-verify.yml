name: ops-probe-deploy-verify
on:
  workflow_dispatch:

permissions:
  contents: read

env:
  BASE: https://api.quickgig.ph
  ORIGIN: https://quickgig.ph
  SERVER_DIR: /home/u789476867/domains/quickgig.ph/public_html/api/

jobs:
  run:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # A) PROBE DOCROOT
      - name: Create probe file
        id: probe
        run: |
          set -e
          ts=$(date +%s)
          mkdir -p api-minimal
          echo "probe-$ts" > "api-minimal/__probe-$ts.txt"
          echo "file=__probe-$ts.txt" >> "$GITHUB_OUTPUT"

      - name: Upload probe (no clean slate)
        uses: SamKirkland/FTP-Deploy-Action@v4
        with:
          server: ${{ secrets.FTP_SERVER }}
          username: ${{ secrets.FTP_USERNAME }}
          password: ${{ secrets.FTP_PASSWORD }}
          port: ${{ secrets.FTP_PORT || 21 }}
          protocol: ftps
          local-dir: api-minimal
          server-dir: ${{ env.SERVER_DIR }}
          dangerous-clean-slate: false

      - name: Fetch probe over HTTPS
        id: fetch_probe
        run: |
          set -e
          url="$BASE/${{ steps.probe.outputs.file }}"
          echo "GET $url"
          code=$(curl -sS -o /tmp/probe -w "%{http_code}" "$url")
          echo "HTTP $code"
          head -c 120 /tmp/probe || true
          echo
          echo "probe_code=$code" >> "$GITHUB_OUTPUT"

      # B) DEPLOY MINIMAL API
      - name: Prepare minimal API payload
        run: |
          set -e
          mkdir -p api-minimal
          cat > api-minimal/index.php <<'PHP'
          <?php
          $origin = $_SERVER['HTTP_ORIGIN'] ?? '';
          $allowed = ['https://quickgig.ph','https://www.quickgig.ph'];
          if (in_array($origin, $allowed, true)) { header('Access-Control-Allow-Origin: ' . $origin); header('Vary: Origin'); }
          header('Access-Control-Allow-Methods: GET, OPTIONS');
          header('Access-Control-Allow-Headers: Content-Type, Authorization');
          if ($_SERVER['REQUEST_METHOD'] === 'OPTIONS') { http_response_code(204); exit; }
          header('Content-Type: application/json');
          echo json_encode(['message' => 'QuickGig API']);
          PHP
          cat > api-minimal/health.php <<'PHP'
          <?php
          $origin = $_SERVER['HTTP_ORIGIN'] ?? '';
          $allowed = ['https://quickgig.ph','https://www.quickgig.ph'];
          if (in_array($origin, $allowed, true)) { header('Access-Control-Allow-Origin: ' . $origin); header('Vary: Origin'); }
          header('Access-Control-Allow-Methods: GET, OPTIONS');
          header('Access-Control-Allow-Headers: Content-Type, Authorization');
          if ($_SERVER['REQUEST_METHOD'] === 'OPTIONS') { http_response_code(204); exit; }
          header('Content-Type: application/json');
          echo json_encode(['status' => 'ok']);
          PHP
          cat > api-minimal/.htaccess <<'HT'
          RewriteEngine Off
          Options -Indexes
          DirectoryIndex index.php index.html
          <FilesMatch "^(\.|composer\.json|composer\.lock|\.env|README|LICENSE)$">
            Require all denied
          </FilesMatch>
          <IfModule mod_headers.c>
            Header set X-Content-Type-Options "nosniff"
            Header set X-Frame-Options "SAMEORIGIN"
            Header set Referrer-Policy "no-referrer-when-downgrade"
            Header set X-XSS-Protection "1; mode=block"
            Header set Permissions-Policy "geolocation=(), microphone=(), camera=()"
          </IfModule>
          HT

      - name: Deploy minimal API (endpoints + .htaccess)
        uses: SamKirkland/FTP-Deploy-Action@v4
        with:
          server: ${{ secrets.FTP_SERVER }}
          username: ${{ secrets.FTP_USERNAME }}
          password: ${{ secrets.FTP_PASSWORD }}
          port: ${{ secrets.FTP_PORT || 21 }}
          protocol: ftps
          local-dir: api-minimal
          server-dir: ${{ env.SERVER_DIR }}
          dangerous-clean-slate: false

      # C) VERIFY & REPORT
      - name: Verify / and /health and print report
        run: |
          set -e
          printf "%-10s %-5s %-6s %s\n" "Endpoint" "Code" "Result" "Body"
          check () {
            path="$1"
            body=$(curl -sS -H "Origin: $ORIGIN" -w "\n%{http_code}" "$BASE$path")
            code=$(echo "$body" | tail -n1)
            json=$(echo "$body" | head -n-1 | tr -d '\n\r\t' | sed -E 's/[[:space:]]+/ /g' | head -c 160)
            res="FAIL"; [ "$code" = "200" ] && res="PASS"
            printf "%-10s %-5s %-6s %s\n" "$path" "$code" "$res" "$json"
          }
          check "/"
          check "/health"
